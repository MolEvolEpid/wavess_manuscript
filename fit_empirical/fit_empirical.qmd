---
title: "Fit simulations to empirical data"
format: html
---

```{r}
library(tidyverse)
library(readxl)
library(ape)
library(ggtree)
library(treeio)
library(phytools)
library(ggpubr)
library(ggridges)
library(ggcorrplot)
library(scales)
library(cowplot)
library(ggh4x)
library(devtools)
load_all('../../wavess/')

theme_set(theme_bw() +
  theme(strip.background = element_rect(color = NA, fill = NA), 
        panel.grid.minor = element_blank(), text = element_text(size = 12)
        ))

id_conversion <- tibble(lanl_id = c('10137+1+B', '10138+1+B', '105692+197+B', '105693+202+B', '105696+207+B', '105698+280+B', '10586+1+B', 
                   '13889+1+B', '820+1+B', '821+1+B', '822+1+B', '824+1+B', '825+1+B'),
                   id = c('P3', 'P8', 'F4', 'F8', 'F2', 'F1', 'P9', 'P2', 'P1', 'P5', 'P6', 'P7', 'P11'))

refdat <- read_excel('real_trees/data/metadata/25_mullins_trees_references.xlsx')
metadat <- read_csv('real_trees/data/metadata/25_mullins_sample_info.csv')

tr_paths <- list.files('real_trees/iqtree', pattern = '.treefile', full.names = TRUE) 
env_tr_names <- refdat %>% 
  filter(gene == 'env') %>% 
  pull(`Tree id`)

trees <- lapply(tr_paths, read.tree)
names(trees) <- gsub('real_trees/iqtree/|.treefile', '', tr_paths)

# subset to env
trees <- trees[names(trees) %in% env_tr_names]

seqs_first_timepoint <- lapply(names(trees), function(x){
  first_timepoint <- metadat %>% 
    filter(aln_ids == x) %>% 
    pull(seq_in_timepoint) %>% 
    gsub('-.*', '', .) %>% 
    strsplit('\\+') %>% 
    unlist()
})
names(seqs_first_timepoint) <- names(trees)


aln_paths <- list.files('real_trees/mafft', full.names = TRUE) 
alns <- lapply(aln_paths, read.FASTA)
names(alns) <- gsub('real_trees/mafft/|.fasta', '', aln_paths)

alns <- alns[names(alns) %in% env_tr_names]

dists <- sapply(names(alns), function(x){
  first_timepoint <- seqs_first_timepoint[[x]]
  labs_first <- sapply(first_timepoint, function(y) names(alns[[x]])[grepl(y, names(alns[[x]]))])
  mean(dist.dna(alns[[x]][labs_first], model = 'raw', as.matrix = TRUE))
})
names(dists) <- names(alns)

keepers <- dists %>% enframe(name = 'id') %>% filter(value < 0.01) %>% pull(id)

trees <- trees[names(trees) %in% keepers]


trees_rooted <- lapply(names(trees), function(x){
  tr_sub <- trees[[x]] %>%
    unroot() 
  first_timepoint <- seqs_first_timepoint[[x]]
  og_tiplabs <- sapply(first_timepoint, function(y) tr_sub$tip.label[grepl(y, tr_sub$tip.label)])
  tr_sub %>% reroot(node = getMRCA(tr_sub, og_tiplabs))
})
names(trees_rooted) <- names(trees)

founders <- read.FASTA('real_trees/data/Founder_25_mullins.fasta')

names(founders) <- sapply(names(founders), function(seq_name){
  name_info <- strsplit(seq_name, split = '\\+')[[1]]
  name_new <- paste0(name_info[1], "+1+B")
  start_pos <- as.numeric(name_info[2])
  if(name_new == "105692+1+B" & start_pos > 6000) name_new <- "105692+197+B"
  if(name_new == "105693+1+B" & start_pos > 6000) name_new <- "105693+202+B"
  if(name_new == "105695+1+B" & start_pos > 6000) name_new <- "105695+181+B"
  if(name_new == "105696+1+B" & start_pos > 6000) name_new <- "105696+207+B"
  if(name_new == "105698+1+B" & start_pos > 6000) name_new <- "105698+280+B"
  name_new
}) 

founder_lens <- sapply(founders, length)


tr_indices_real <- lapply(names(trees_rooted), function(x){
  gens <- trees_rooted[[x]] %>% 
    as_tibble() %>% 
    # The sequence headers have seven fields (separated by '+') and they are:
    # patient_id+hxb2_start+hxb2_end+accession_number+subtype+days-from-infection+days-from-first-sample
    separate(label, sep = '\\_', remove = FALSE,
             into = c('patient_id', 'hxb2_start', 'hxb2_end', 'accession_number', 'subtype', 'days_from_infection', 'days_from_first_sample')) %>% 
    left_join(metadat %>%
      filter(aln_ids == x) %>%
      mutate(timepoints = gsub('^-', 'neg', timepoints)) %>%
      separate_rows(c(timepoints, seq_in_timepoint), sep = '-') %>%
      separate_rows(seq_in_timepoint, sep = '\\+') %>%
        mutate(timepoints = factor(as.numeric(gsub('neg', '-', timepoints)))) %>% 
      rename(timepoint = timepoints, accession_number = seq_in_timepoint)) %>% 
    filter(!is.na(timepoint)) %>%
    select(label, timepoint) %>% 
    deframe()
  calc_tr_stats(trees_rooted[[x]], gens, bl_thresh = 1/founder_lens[x]) %>% 
    mutate(id = x, .before = 1) %>% 
    rename(stat_value_real = stat_value)
}) %>% bind_rows() %>% suppressWarnings() %>% suppressMessages() %>% 
  mutate(id = case_when(id == '10137+1+B' ~ 'P3',
                            id == '10138+1+B' ~ 'P8',
                            id == '105692+197+B' ~ 'F4',
                            id == '105693+202+B' ~ 'F8',
                            id == '105696+207+B' ~ 'F2',
                            id == '105698+280+B' ~ 'F1',
                            id == '10586+1+B' ~ 'P9',
                            id == '13889+1+B' ~ 'P2',
                            id == '820+1+B' ~ 'P1',
                            id == '821+1+B' ~ 'P5',
                            id == '822+1+B' ~ 'P6',
                            id == '824+1+B' ~ 'P7',
                            id == '825+1+B' ~ 'P11'),
         id = factor(id, levels = rev(c(paste0('P', 1:11), paste0('F', 1:8))))) %>% 
  mutate(stat_name = factor(
    case_when(stat_name == 'divergence_slope' ~ 'Mean annual\nchange in divergence',
                               stat_name == 'diversity_slope' ~ 'Mean annual\nchange in diversity',
                               stat_name == 'mean_bl' ~ 'Mean branch length',
                               stat_name == 'transition_score' ~ 'Mean number of\ntransitions per timepoint',
                               TRUE ~ gsub('_', ' ', str_to_sentence(stat_name))),
                            levels = c('Mean branch length', 'Mean annual\nchange in diversity', 'Mean annual\nchange in divergence', 'Mean leaf depth', 'Mean number of\ntransitions per timepoint'))) %>% 
  drop_na() %>% 
  mutate(stat_value_real = case_when(grepl('annual', stat_name) ~ stat_value_real*365.25,
                                     TRUE ~ stat_value_real))
```


```{r}
# tree summary stats
tr_summary_stats <- read_csv('output/summaries/tr_summary_stats.csv') %>% 
  filter(file != 'file') %>% 
  separate(file, into = c('output', 'id', 'simulations', 'file'), sep = '/') %>% 
  separate(file, into = c('id', 'immune_cost', 'rep_cost', 'mut_rate', 'run', 'rep', 'tr', 'summary', 'stats'), sep = '_') %>% 
  select(id, run, stat_name, stat_value, mut_rate, immune_cost, rep_cost) %>% 
  mutate(mut_rate = gsub('mutrate', '', mut_rate),
         immune_cost = gsub('maxepi', '', immune_cost),
         rep_cost = gsub('repcost', '', rep_cost),
         stat_value = as.numeric(stat_value),
         run = as.numeric(gsub('run', '', run))) %>% 
  filter(id %in% keepers) %>% 
  mutate(id = case_when(id == '10137+1+B' ~ 'P3',
                            id == '10138+1+B' ~ 'P8',
                            id == '105692+197+B' ~ 'F4',
                            id == '105693+202+B' ~ 'F8',
                            id == '105696+207+B' ~ 'F2',
                            id == '105698+280+B' ~ 'F1',
                            id == '10586+1+B' ~ 'P9',
                            id == '13889+1+B' ~ 'P2',
                            id == '820+1+B' ~ 'P1',
                            id == '821+1+B' ~ 'P5',
                            id == '822+1+B' ~ 'P6',
                            id == '824+1+B' ~ 'P7',
                            id == '825+1+B' ~ 'P11'),
         id = factor(id, levels = rev(c(paste0('P', 1:11), paste0('F', 1:8))))) %>% 
  mutate(stat_name = factor(
    case_when(stat_name == 'divergence_slope' ~ 'Mean annual\nchange in divergence',
                               stat_name == 'diversity_slope' ~ 'Mean annual\nchange in diversity',
                               stat_name == 'mean_bl' ~ 'Mean branch length',
                               stat_name == 'transition_score' ~ 'Mean number of\ntransitions per timepoint',
                               TRUE ~ gsub('_', ' ', str_to_sentence(stat_name))),
                            levels = c('Mean branch length', 'Mean annual\nchange in diversity', 'Mean annual\nchange in divergence', 'Mean leaf depth', 'Mean number of\ntransitions per timepoint'))) %>% 
  drop_na() %>% 
  mutate(stat_value = case_when(grepl('annual', stat_name) ~ stat_value*365.25,
                                     TRUE ~ stat_value))


all_stats <- left_join(tr_summary_stats, tr_indices_real)

all_stats_scaled <- bind_rows(all_stats %>% 
                                select(-stat_value_real), 
                              tr_indices_real %>%
                                mutate(run = -1) %>% rename(stat_value=stat_value_real)) %>% 
  filter(id != '105695+181+B') %>%
  group_by(stat_name) %>% 
  mutate(stat_value_scaled = scale(stat_value)) %>% 
  ungroup()

all_stats <- all_stats %>% 
  left_join(all_stats_scaled) %>% 
  left_join(all_stats_scaled %>% 
      filter(run < 0) %>% 
        select(id, stat_name, stat_value_real_scaled = stat_value_scaled))

errors_summary <- all_stats %>% 
  filter(rep_cost == 0.001 & mut_rate == 4e-5) %>% 
  group_by(id, run, immune_cost, rep_cost, mut_rate) %>% 
  summarize(err_scaled=sum(sqrt((stat_value_scaled - stat_value_real_scaled)^2)))
```



```{r, fig.width=7, fig.height=7}
real_cor_plot <- tr_indices_real %>% 
  pivot_wider(names_from = stat_name, values_from = stat_value_real) %>% 
  select(-id) %>%
  cor(method = 'spearman') %>% ggcorrplot(lab = TRUE, outline.color = 'white')
real_cor_plot
ggsave('figures/real_cor_plot.pdf', real_cor_plot, width = 7, height = 7)
```


```{r, fig.width=20, fig.height=8}
epi_loc_fig <- tr_summary_stats %>%
  mutate(id = factor(id, levels = rev(c(paste0('P', 1:11), paste0('F', 1:8))))) %>% 
  filter(run < 20) %>% 
  mutate(in_dynamic_range = (as.numeric(immune_cost) > 0 & as.numeric(immune_cost) < 0.7)) %>% 
  ggplot(aes(y = stat_value, x = factor(run))) + 
  facet_grid(stat_name~immune_cost, scales = 'free') +
  geom_boxplot() +
  scale_color_grey(start = 0.8, end = 0.2) +
  labs(x = 'Epitope location set', y = 'Phylogenetic summary statistic value') +
  theme(legend.position = 'none', axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
  stat_compare_means(vjust = 1, hjust = 0, size = 3)

epi_loc_fig
ggsave('figures/epitope_locations.pdf', epi_loc_fig, width = 20, height = 8)
```




```{r, fig.width=13, fig.height=5}
imm_comp_fig <- tr_summary_stats %>%
  mutate(id = factor(id, levels = rev(c(paste0('P', 1:11), paste0('F', 1:8))))) %>% 
  mutate(in_dynamic_range = (as.numeric(immune_cost) > 0 & as.numeric(immune_cost) < 0.7)) %>% 
  ggplot(aes(y = stat_value, x = immune_cost)) + 
  facet_wrap(stat_name~., scales = 'free', nrow = 1) +
  geom_boxplot(aes(col = in_dynamic_range)) +
  scale_color_grey(start = 0.8, end = 0.2) +
  labs(x = 'Immune cost', y = 'Phylogenetic summary\nstatistic value') +
  theme(legend.position = 'none')

err_sum_fig <- errors_summary %>% 
  group_by(id, immune_cost) %>%
  summarize(mean_err = mean(err_scaled),
            q025 = quantile(err_scaled, 0.025),
            q975 = quantile(err_scaled, 0.975),
            n_sims = n()) %>% 
  ungroup() %>% 
  ggplot(aes(x = as.numeric(immune_cost), y = mean_err, group = id)) + #, col = which_min_imm
  facet_wrap(~fct_rev(id), nrow = 1) +
  geom_point(aes(col = factor(n_sims))) +
  geom_ribbon(aes(ymin = q025, ymax = q975), alpha = 0.2, col = NA) +
  scale_color_grey(start = 0.8, end = 0.2) +
  scale_x_continuous(breaks = breaks_pretty()) +
  labs(x = 'Immune cost', y = 'Mean SSE', col = 'Number of replicates') +
  theme(legend.position = 'bottom') 

immune_cost_fig <- cowplot::plot_grid(imm_comp_fig, err_sum_fig, ncol = 1, rel_heights = c(1, 1), align = 'v', axis = 'trbl', labels = 'AUTO')

immune_cost_fig
ggsave('figures/immune_costs.pdf', immune_cost_fig, width = 13, height = 5)
```


```{r, fig.width=17, fig.height=9}
stats_supp <- all_stats %>% 
  mutate(type = case_when(grepl('ivergence|leaf', stat_name) ~ 'I+/S+',
                          grepl('iversity|bl|Transition', stat_name) ~ 'I+/S-',
                          # grepl('leaf', stat_name) ~ 'Mean leaf depth',
                          TRUE ~ 'Other')) %>%
  group_by(id, immune_cost, stat_name) %>% 
  mutate(n_sim = factor(n())) %>% 
  ggplot(aes(x = as.numeric(immune_cost), y = stat_value)) +
  facet_grid(stat_name~fct_rev(id), scales = 'free') +
  geom_point(alpha = 0.1) + 
  geom_hline(aes(yintercept = stat_value_real), col = 'red') +
  geom_line(aes(x = 0, y = 0, col = 'Empirical value'), alpha = 0) +
  geom_point(aes(x = 0, y = 0, col = 'Simulated value'), alpha = 0) +
  scale_color_manual(values = c('red', 'black')) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  scale_x_continuous(breaks = breaks_pretty()) +
  labs(x = 'Immune cost', y = 'Phylogenetic summary statistic value', col = '') +
  theme(legend.position = 'top')

stats_supp
ggsave('figures/stats_supp.pdf', stats_supp, width = 17, height = 9)
```


```{r, fig.width=17, fig.height=8.5}
errors_supp <-  all_stats %>%
  filter(id != '105695+181+B') %>%
  filter(rep_cost == 0.001 & mut_rate == 4e-5) %>% 
  group_by(id, run, immune_cost, rep_cost, mut_rate, stat_name) %>%
  summarize(err=sum(sqrt((stat_value - stat_value_real)^2))) %>%
  ggplot(aes(x = as.numeric(immune_cost), y = err, group = id)) + #, col = which_min_imm
  facet_grid(stat_name~fct_rev(id), scales = 'free') +
  geom_point(alpha = 0.1) +
  scale_color_grey(start = 0.8, end = 0.2) +
  scale_x_continuous(breaks = breaks_pretty()) +
  labs(x = 'Immune cost', y = 'Mean SSE', col = 'Number of replicates') +
  theme(legend.position = 'top')

errors_supp
ggsave('figures/errors_supp.pdf', errors_supp, width = 17, height = 8.5)
```



```{r, fig.width=10, fig.height=5}
top05 <- errors_summary %>%
  filter(immune_cost > 0.001 & immune_cost < 0.7) %>%
  group_by(id) %>%
  slice_min(err_scaled, n = round(600*0.05)) %>%
inner_join(all_stats) %>%
  left_join(errors_summary %>%
              filter(immune_cost > 0.001 & immune_cost < 0.7) %>%
  group_by(id) %>% 
  slice_min(err_scaled, n = 1) %>% mutate(type = 'best')) 

top05_fig <- ggpubr::ggarrange(top05 %>%
  ggplot(aes(x = as.numeric(immune_cost), y = id)) +
  facet_grid(~'Immune cost') +
  geom_density_ridges(stat = 'binline', scale = 0.9, col = NA, binwidth = 0.1) +
  geom_point(aes(x = as.numeric(immune_cost[type == 'best']), col = 'Closest\nsimulation'), shape = 1, size = 2, stroke = 1) +
    geom_point(aes(col = 'Empirical\nvalue'), x = 0.3, size = 2, shape = 8, stroke = 1, alpha = 0) +
    scale_color_manual(values = c('seagreen', 'black'), breaks = c('Empirical\nvalue', 'Closest\nsimulation')) +
    scale_x_continuous(breaks = breaks_pretty()) +
    guides(color = guide_legend(override.aes = list(alpha = 1))) +
  theme(legend.position = 'none') +
  labs(x = 'Immune cost', y = 'Dataset', col = ''),
  
  top05 %>% 
  ggplot(aes(y = id, x = stat_value)) +
  facet_wrap(~stat_name, scales = 'free_x', nrow = 1) +
  geom_density_ridges(scale = 0.9, col = NA) +
  geom_point(aes(x = stat_value_real, col = 'Empirical\nvalue'), size = 2, shape = 8, stroke = 1) +
geom_point(aes(x = stat_value[type == 'best'], col = 'Closest\nsimulation'), shape = 1, size = 2, stroke = 1) +
  scale_color_manual(values = c('seagreen', 'black'), breaks = c('Empirical\nvalue', 'Closest\nsimulation')) +
  scale_x_continuous(breaks = breaks_pretty(n = 4)) +
  labs(x = 'Phylogenetic summary statistic value') +
  theme(axis.text.y = element_blank(), axis.title.y = element_blank(),
        axis.ticks.y = element_blank(), plot.margin = margin(, 0.25, , , "cm"),
        axis.text.x = element_text(size = 8)
        ), 
widths = c(1,4), common.legend = TRUE, align = 'hv', labels = 'AUTO')

top05_fig
ggsave('figures/top_5pct.pdf', top05_fig, width = 10, height = 5)
```


```{r}
errors_summary %>%
  filter(immune_cost %in% c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6)) %>%
  filter(immune_cost > 0 & immune_cost < 0.7) %>%
  group_by(id) %>%
inner_join(all_stats)  %>% 
  group_by(id, stat_name, stat_value_real) %>% 
  summarize(min_sim = min(stat_value),
            max_sim = max(stat_value)) %>% 
  mutate(in_range = stat_value_real >= min_sim & stat_value_real <= max_sim) %>% 
  group_by(stat_name, in_range) %>%
  group_by(in_range) %>%
  tally() %>% 
  pivot_wider(names_from = in_range, values_from = n)

top05 %>% 
  group_by(id, stat_name, stat_value_real) %>% 
  summarize(min_sim = min(stat_value),
            max_sim = max(stat_value)) %>% 
  mutate(in_range = stat_value_real >= min_sim & stat_value_real <= max_sim) %>% 
  group_by(stat_name, in_range) %>%
  group_by(in_range) %>%
  tally() %>% 
  pivot_wider(names_from = in_range, values_from = n) %>% 
  mutate(tot = `TRUE`+`FALSE`, prop = `TRUE`/(`TRUE`+`FALSE`))
```




```{r, fig.width=7, fig.height=7}
stat_names <- c("Mean branch length", 
"Mean annual\nchange in diversity",
"Mean annual\nchange in divergence",
"Mean leaf depth",
"Mean number of\ntransitions per timepoint"#,
)

tr_plots <- lapply(unique(all_stats$id), function(id2){
  
  id <- id_conversion %>% filter(id == id2) %>% pull(lanl_id) 

max_tr_len <- 0.4
max_yr <- 12

metadat_sub <- metadat %>% 
    filter(aln_ids == id) #%>% 
  info <- trees_rooted[[id]] %>% 
    as_tibble() %>%
    # The sequence headers have seven fields (separated by '+') and they are:
    # patient_id+hxb2_start+hxb2_end+accession_number+subtype+days-from-infection+days-from-first-sample
    separate(label, sep = '\\_', remove = FALSE,
             into = c('patient_id', 'hxb2_start', 'hxb2_end', 'accession_number', 'subtype', 'days_from_infection', 'days_from_first_sample')) %>% 
    left_join(metadat %>%
      filter(aln_ids == id) %>%
      mutate(timepoints = gsub('^-', 'neg', timepoints)) %>%
      separate_rows(c(timepoints, seq_in_timepoint), sep = '-') %>%
      separate_rows(seq_in_timepoint, sep = '\\+') %>%
        mutate(timepoints = as.numeric(gsub('neg', '-', timepoints)),
               day = case_when(min(timepoints) < 0 ~ round(abs(min(timepoints)) + timepoints),
                           TRUE ~ round(timepoints)),
               year = day/365.25) %>%
      rename(timepoint = timepoints, accession_number = seq_in_timepoint))
  tr_plot <- trees_rooted[[id]] %>% 
    as_tibble() %>% 
    left_join(info)  %>% 
    as.treedata() %>%
    ggtree() +
      geom_treescale(width = 0.01) +
    geom_tippoint(aes(col = year)) +
    scale_color_viridis_c(option = 'H', begin = 0, end = 1, breaks = breaks_pretty(), limits = c(0, max_yr)) +
    labs(col = 'Years post-infection') + 
    coord_cartesian(xlim = c(0, max_tr_len)) 

  errs_sum <- all_stats %>% 
    filter(immune_cost %in% c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6)) %>%
    filter(id == id2) %>% 
    left_join(id_conversion) %>% 
    filter(stat_name %in% stat_names) %>%
    filter(rep_cost == 0.001 & mut_rate == 4e-5) %>% 
    group_by(id, lanl_id, run, immune_cost, rep_cost, mut_rate) %>% 
    summarize(err_scaled=sum(sqrt((stat_value_scaled - stat_value_real_scaled)^2))) %>% 
    group_by(id) %>% 
    slice_min(err_scaled) %>% 
    mutate(tr_path = paste0('output/trees_all/treefiles/', lanl_id, '_maxepi', immune_cost, '_repcost0.001_mutrate4e-05_run', run, '_rep0_viral_seqs_active_CD4_sliced.treefile'))
  
  
  tr_sim <- read.tree(errs_sum$tr_path[1]) %>% 
    unroot() 
  first_timepoint <- tr_sim$tip.label[as.numeric(gsub('gen|_.*', '', tr_sim$tip.label)) == min(as.numeric(gsub('gen|_.*', '', tr_sim$tip.label)))]
  og_tiplabs <- sapply(first_timepoint, function(y) tr_sim$tip.label[tr_sim$tip.label == y])
  tr_sim <- tr_sim %>% reroot(node = getMRCA(tr_sim, og_tiplabs))
  
  info <- tr_sim %>% 
    as_tibble() %>%
    separate(label, sep = '\\_', remove = FALSE,
             into = c('generation', 'n')) %>% 
    mutate(generation = as.numeric(gsub('gen', '', generation)),
               year = generation/365.25)
  
  tr_plot_sim_best <- tr_sim %>% 
    as_tibble() %>% 
    left_join(info)  %>% 
    as.treedata() %>%
    ggtree() +
    labs(title = paste(gsub('\n', ' ', str_c(stat_names, collapse = ', ')), '\n', errs_sum$tr_path[1])) + 
      geom_treescale(width = 0.01) +
    geom_tippoint(aes(col = year)) +
     scale_color_viridis_c(option = 'H', begin = 0, end = 1, breaks = breaks_pretty(), limits = c(0, max_yr)) +
    labs(col = 'Years post-infection') +
    theme(plot.title = element_text(hjust = 0.5, face = 'bold')) + 
    coord_cartesian(xlim = c(0, max_tr_len))
  
ggarrange(tr_plot, tr_plot_sim_best, ncol = 1, common.legend = TRUE) 
  
})
names(tr_plots) <- unique(all_stats$id)

tr_plots
```






```{r}
rate_paths <- list.files('real_trees/iqtree', pattern = '.rate$', full.names = TRUE) 

rates <- lapply(rate_paths, function(x) read_tsv(x, comment = '#') %>% mutate(path = x)) %>% 
  bind_rows() %>% 
  mutate(lanl_id = gsub('.*/|.rate', '', path),
         type = 'real') %>% 
  select(-path) %>%
  filter(lanl_id %in% keepers) %>% 
  left_join(id_conversion)



rates_sim <- lapply(unique(all_stats$id), function(id2){
  
  id <- id_conversion %>% filter(id == id2) %>% pull(lanl_id) 

  errs_sum <- all_stats %>% 
    filter(immune_cost %in% c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6)) %>%
    filter(id == id2) %>% 
    left_join(id_conversion) %>% 
    filter(stat_name %in% stat_names) %>%
    filter(rep_cost == 0.001 & mut_rate == 4e-5) %>% 
    group_by(id, lanl_id, run, immune_cost, rep_cost, mut_rate) %>% 
    summarize(err_scaled=sum(sqrt((stat_value_scaled - stat_value_real_scaled)^2))) %>% 
    group_by(id) %>% 
    slice_min(err_scaled) %>% 
    mutate(rate_path = paste0('output/trees_all/rates/', lanl_id, '_maxepi', immune_cost, '_repcost0.001_mutrate4e-05_run', run, '_rep0_viral_seqs_active_CD4_sliced.rate'))
  print(errs_sum$rate_path[1])

  read_tsv(errs_sum$rate_path[1], comment = '#') %>% mutate(path = errs_sum$rate_path[1])
  
}) %>% 
  bind_rows() %>% 
  mutate(lanl_id = gsub('.*/|_.*', '', path),
         type = 'sim') %>% 
  select(-path) %>% 
  left_join(id_conversion)

rates_all <- bind_rows(rates, rates_sim)
```



```{r}
rates_all %>% 
  group_by(type) %>% 
  summarize(mean_rate = mean(Rate),
            median_rate = median(Rate),
            max_rate = max(Rate))
```


```{r, fig.width=18, fig.height=7}
rates_fig <- rates_all %>% 
  left_join(id_conversion) %>% 
  mutate(id = factor(id, levels = (c(paste0('P', 1:11), paste0('F', 1:8))))) %>% 
  mutate(type = ifelse(type == 'real', 'Empirical', 'Simulated')) %>% 
  ggplot(aes(x = Rate)) +
  facet_grid(type~id, scales = 'free_y', space = 'free_y') +
  geom_histogram(bins = 50) +
  labs(y = 'Number of sites', fill = 'Individual') +
  scale_x_log10()

rates_fig
ggsave('figures/rates.pdf', rates_fig, width = 18, height = 7)
```

```{r, fig.width=7, fig.height=7}
tr_plots_sub <- lapply(c('P8', 'F8', 'F2'), function(id2){
  
  id <- id_conversion %>% filter(id == id2) %>% pull(lanl_id) 

max_tr_len <- 0.18
max_yr <- 10

metadat_sub <- metadat %>% 
    filter(aln_ids == id) 
  info <- trees_rooted[[id]] %>% 
    as_tibble() %>%
    # The sequence headers have seven fields (separated by '+') and they are:
    # patient_id+hxb2_start+hxb2_end+accession_number+subtype+days-from-infection+days-from-first-sample
    separate(label, sep = '\\_', remove = FALSE,
             into = c('patient_id', 'hxb2_start', 'hxb2_end', 'accession_number', 'subtype', 'days_from_infection', 'days_from_first_sample')) %>% 
    left_join(metadat %>%
      filter(aln_ids == id) %>%
      mutate(timepoints = gsub('^-', 'neg', timepoints)) %>%
      separate_rows(c(timepoints, seq_in_timepoint), sep = '-') %>%
      separate_rows(seq_in_timepoint, sep = '\\+') %>%
        mutate(timepoints = as.numeric(gsub('neg', '-', timepoints)),
               day = case_when(min(timepoints) < 0 ~ round(abs(min(timepoints)) + timepoints),
                           TRUE ~ round(timepoints)),
               year = day/365.25) %>%
      rename(timepoint = timepoints, accession_number = seq_in_timepoint))
  
  tr_plot <- trees_rooted[[id]] %>% 
    as_tibble() %>% 
    left_join(info)  %>% 
    as.treedata() %>%
    ggtree() +
      geom_treescale(width = 0.01) +
    geom_tippoint(aes(col = year)) +
    scale_color_viridis_c(option = 'H', begin = 0, end = 1, breaks = breaks_pretty(), limits = c(0, max_yr)) +
    labs(col = 'Years post-infection') + 
    coord_cartesian(xlim = c(0, max_tr_len)) +
    theme(legend.position = 'top')

  errs_sum <- all_stats %>% 
    filter(immune_cost %in% c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6)) %>%
    filter(id == id2) %>% 
    left_join(id_conversion) %>% 
    filter(stat_name %in% stat_names) %>%
    filter(rep_cost == 0.001 & mut_rate == 4e-5) %>% 
    group_by(id, lanl_id, run, immune_cost, rep_cost, mut_rate) %>% 
    summarize(err_scaled=sum(sqrt((stat_value_scaled - stat_value_real_scaled)^2))) %>% 
    group_by(id) %>% 
    slice_min(err_scaled) %>% 
    mutate(tr_path = paste0('output/trees_all/treefiles/', lanl_id, '_maxepi', immune_cost, '_repcost0.001_mutrate4e-05_run', run, '_rep0_viral_seqs_active_CD4_sliced.treefile'))
  
  
  tr_sim <- read.tree(errs_sum$tr_path[1]) %>% 
    unroot() 
  first_timepoint <- tr_sim$tip.label[as.numeric(gsub('gen|_.*', '', tr_sim$tip.label)) == min(as.numeric(gsub('gen|_.*', '', tr_sim$tip.label)))]
  og_tiplabs <- sapply(first_timepoint, function(y) tr_sim$tip.label[tr_sim$tip.label == y])
  tr_sim <- tr_sim %>% reroot(node = getMRCA(tr_sim, og_tiplabs))
  
  info <- tr_sim %>% 
    as_tibble() %>%
    separate(label, sep = '\\_', remove = FALSE,
             into = c('generation', 'n')) %>% 
    mutate(generation = as.numeric(gsub('gen', '', generation)),
               year = generation/365.25)
  
  tr_plot_sim_best <- tr_sim %>% 
    as_tibble() %>% 
    left_join(info)  %>% 
    as.treedata() %>%
    ggtree() +
    labs(title = paste0(id2, ': immune cost ', gsub('.*maxepi|_repcost0.001_mutrate4e-05|_rep0_aln_w_cons|_run.*', '', errs_sum$tr_path[1]))) +
      geom_treescale(width = 0.01) +
    geom_tippoint(aes(col = year)) +
     scale_color_viridis_c(option = 'H', begin = 0, end = 1, breaks = breaks_pretty(), limits = c(0, max_yr)) +
    labs(col = 'Years post-infection') +
    theme(plot.title = element_text(hjust = 0.5, face = 'bold')) + 
    coord_cartesian(xlim = c(0, max_tr_len)) +
    theme(legend.position = 'none')
  
  if(id2 != 'F8'){
    tr_plot <- tr_plot + theme(legend.position = 'none')
    tr_plts <- ggarrange(tr_plot, tr_plot_sim_best, ncol = 1)
  } else{
    tr_plts <- ggarrange(tr_plot, tr_plot_sim_best, ncol = 1, heights = c(1.22, 1))
  }
  
  tr_plts


  
})
names(tr_plots_sub) <- c('P8', 'F8', 'F2')
```


```{r, fig.width=15, fig.height=8}
plot_rate <- function(i, t){
  rates_all %>% 
  filter(id == i & type == t) %>% 
  ggplot(aes(x = Rate)) +
  geom_histogram(bins = 50, fill = 'grey50', col = 'grey50') +
  labs(y = 'Number of sites') +
  scale_x_log10(breaks = c(1, 5, 10), limits = c(0.2, 30)) +
    theme_nothing() + 
    theme(axis.text.x = element_text(size = 8), axis.title.x = element_text(size = 10)) 
}


tr_and_rates_plot <- ggarrange(ggdraw() + 
  draw_plot(ggarrange(ggarrange(NULL, tr_plots_sub$P8, ncol = 1, heights = c(1, 9)), 
                      tr_plots_sub$F8, 
                      ggarrange(NULL, tr_plots_sub$F2, ncol = 1, heights = c(1, 9)), 
                      nrow = 1, labels = 'AUTO')) +
  draw_plot(plot_rate('P8', 'real'), height = 0.25, width = 0.1, x = 0.2, y = 0.46) +
  draw_plot(plot_rate('P8', 'sim'), height = 0.25, width = 0.1, x = 0.2, y = 0.01) +
  draw_plot(plot_rate('F8', 'real'), height = 0.25, width = 0.1, x = 0.56, y = 0.46) +
  draw_plot(plot_rate('F8', 'sim'), height = 0.25, width = 0.1, x = 0.56, y = 0.01) +
  draw_plot(plot_rate('F2', 'real'), height = 0.25, width = 0.1, x = 0.87, y = 0.46) +
  draw_plot(plot_rate('F2', 'sim'), height = 0.25, width = 0.1, x = 0.87, y = 0.01)) %>% 
  annotate_figure(left = text_grob(paste0("Simulated data                                               Empirical data          "), size = 14, rot = 90, face = 'bold'))

tr_and_rates_plot
ggsave('figures/trees.pdf', tr_and_rates_plot, width = 15, height = 8)
```







```{r, fig.width=10, fig.height=3}
metadat_more <- read_csv('../../replicative_fitness/from_fernando/time-series_table_seqs_filtered.csv', 
                         col_names = FALSE, skip = 1)
colnames(metadat_more) <- c("number", "record", "SE.id.SSAM.", "PAT.id.SSAM.", "Country", "Sampling.Year", 
"Patient.Health", "Organism", "Subtype", "Drug.Naive", "Problematic.Sequence", 
"Viral.load", "CD4.count", "Days.from.Infection", "Days.from.Seroconversion", 
"Days.from.first.Sample", "Fiebig.Stage", "Days.from.treatment.start", 
"Days.from.treatment.end", "Map.image.SE.id.", "HXB2.MAC239.start", 
"HXB2.MAC239.stop", "Se.ID", "Sequence.Length", "Sequence", "Patient.Id", 
"N.of.patient.timepoints", "SE.id.SA.", "Accession")
metadat_more <- metadat %>% 
  select(Accession=seq_in_timepoint) %>% 
  separate_rows(Accession) %>% 
  inner_join(metadat_more) %>% 
  select(Accession, PAT.id.SSAM., Sampling.Year, Drug.Naive, Viral.load, CD4.count,  Days.from.Seroconversion, HXB2.MAC239.start, HXB2.MAC239.stop, Sequence.Length) %>% 
  mutate(Days.from.Seroconversion = as.numeric(Days.from.Seroconversion)) %>% 
  filter(PAT.id.SSAM. != 13654)

vl_cd4 <- metadat_more %>% 
  filter(!PAT.id.SSAM. %in% c(105695, 10586, 821)) %>%
  select(PAT.id.SSAM., Days.from.Seroconversion, Drug.Naive, Viral.load, CD4.count) %>% 
  mutate(to_rm = case_when(PAT.id.SSAM. == 10586 & Days.from.Seroconversion > 4200 ~ 'Removed',
                           PAT.id.SSAM. == 13889 & Days.from.Seroconversion > 4200 ~ 'Removed',
                           TRUE ~ 'Kept')) %>% 
  pivot_longer(c(Viral.load, CD4.count)) %>% 
  mutate(name = gsub('\\.', ' ', name)) %>% 
  group_by(PAT.id.SSAM., Drug.Naive) %>% 
  mutate(drug_start = ifelse(Drug.Naive == 'no' & Days.from.Seroconversion == min(Days.from.Seroconversion[Drug.Naive == 'no']), Days.from.Seroconversion, NA),
         years = Days.from.Seroconversion/365.25,
         drug_start = drug_start/365.25) %>% 
  rename(lanl_id = PAT.id.SSAM.) %>% 
  left_join(id_conversion %>% mutate(lanl_id = as.numeric(gsub('\\+.*', '', lanl_id)))) %>% 
  mutate(id = factor(id, levels = c(paste0('P', 1:11), paste0('F', 1:8)))) %>% 
  ggplot(aes(x = years, y = value, shape = to_rm)) +
  facet_grid(name~id, scales = 'free') +
  geom_vline(aes(xintercept = drug_start), linetype = 'dotted') +
  geom_line() +
  geom_point() +
  scale_x_continuous(breaks = breaks_pretty()) +
  scale_shape_manual(values = c(19, 1)) +
  labs(x = 'Years post-infection', y = 'Value', col = '', shape = '') +
  scale_y_facet(
    name == "Viral load",
    trans  = "log10",
    breaks = breaks_log(),
    labels = label_log()
  ) +
  theme(legend.position = 'top')

vl_cd4
ggsave('figures/vl_cd4.pdf', vl_cd4, width = 10, height = 3)
```


